package yichen

fun main() {
    val sequenceKValue = SequenceKValue()

    val expected = listOf(
        1, 3, 4, 7, 9, 10, 13, 15, 19, 21,
        22, 27, 28, 31, 39, 40, 43, 45, 46, 55,
        57, 58, 63, 64, 67, 79, 81, 82, 85, 87,
        91, 93, 94, 111, 115, 117, 118, 121, 127, 129,
        130, 135, 136, 139, 159, 163, 165, 166, 171, 172,
        175, 183, 187, 189, 190, 193, 202, 223, 231, 235,
        237, 238, 243, 244, 247, 255, 256, 259, 261, 262,
        271, 273, 274, 279, 280, 283, 319, 327, 331, 333,
        334, 343, 345, 346, 351, 352, 355, 364, 367, 375,
        379, 381, 382, 387, 388, 391, 405, 406, 409, 418,
        447, 463, 471, 475, 477, 478, 487, 489, 490, 495,
        496, 499, 511, 513, 514, 517, 519, 523, 525, 526,
        543, 547, 549, 550, 559, 561, 562, 567, 568, 571,
        580, 607, 639, 655, 663, 667, 669, 670, 687, 691,
        693, 694, 703, 705, 706, 711, 712, 715, 729, 730,
        733, 735, 742, 751, 759, 763, 765, 766, 769, 775,
        777, 778, 783, 784, 787, 811, 813, 814, 819, 820,
        823, 837, 838, 841, 850, 895, 927, 943, 951, 955,
        957, 958, 975, 979, 981, 982, 991, 993, 994, 999,
        1000, 1003, 1023, 1027, 1029, 1030, 1035, 1036, 1039, 1047,
        1051, 1053, 1054, 1057, 1066, 1087, 1093, 1095, 1099, 1101,
        1102, 1119, 1123, 1125, 1126, 1135, 1137, 1138, 1143, 1144,
        1147, 1161, 1162, 1165, 1174, 1215, 1216, 1219, 1228, 1255,
        1279, 1311, 1327, 1335, 1339, 1341, 1342, 1375, 1383, 1387,
        1389, 1390, 1407, 1411, 1413, 1414, 1423, 1425, 1426, 1431,
        1432, 1435, 1459, 1461, 1462, 1467, 1468, 1471, 1485, 1486,
        1489, 1498, 1503, 1519, 1527, 1531, 1533, 1534, 1539, 1540,
        1543, 1551, 1552, 1555, 1557, 1558, 1567, 1569, 1570, 1575,
        1576, 1579, 1623, 1627, 1629, 1630, 1639, 1641, 1642, 1647,
        1648, 1651, 1675, 1677, 1678, 1683, 1684, 1687, 1701, 1702,
        1705, 1714, 1741, 1791, 1822, 1855, 1887, 1903, 1911, 1915,
        1917, 1918, 1951, 1959, 1963, 1965, 1966, 1983, 1987, 1989,
        1990, 1999, 2001, 2002, 2007, 2008, 2011, 2047, 2055, 2059,
        2061, 2062, 2071, 2073, 2074, 2079, 2080, 2083, 2095, 2103,
        2107, 2109, 2110, 2115, 2116, 2119, 2133, 2134, 2137, 2146,
        2175, 2187, 2188, 2191, 2199, 2200, 2203, 2205, 2206, 2227,
        2239, 2247, 2251, 2253, 2254, 2271, 2275, 2277, 2278, 2287,
        2289, 2290, 2295, 2296, 2299, 2308, 2323, 2325, 2326, 2331,
        2332, 2335, 2349, 2350, 2353, 2362, 2431, 2433, 2434, 2439,
        2440, 2443, 2457, 2458, 2461, 2470, 2511, 2512, 2515, 2524,
        2551, 2559, 2623, 2655, 2671, 2679, 2683, 2685, 2686, 2751,
        2767, 2775, 2779, 2781, 2782, 2815, 2823, 2827, 2829, 2830,
        2847, 2851, 2853, 2854, 2863, 2865, 2866, 2871, 2872, 2875,
        2919, 2923, 2925, 2926, 2935, 2937, 2938, 2943, 2944, 2947,
        2971, 2973, 2974, 2979, 2980, 2983, 2997, 2998, 3001, 3007,
        3010, 3039, 3055, 3063, 3067, 3069, 3070, 3079, 3081, 3082,
        3087, 3088, 3091, 3103, 3105, 3106, 3109, 3111, 3115, 3117,
        3118, 3135, 3139, 3141, 3142, 3151, 3153, 3154, 3159, 3160,
        3163, 3172, 3199, 3247, 3255, 3259, 3261, 3262, 3279, 3280,
        3283, 3285, 3286, 3295, 3297, 3298, 3303, 3304, 3307, 3351
    )

    var allPass = true
    for (i in expected.indices) {
        val actual = sequenceKValue.valueAtK(i + 1)
        if (actual != expected[i]) {
            println("❌ Failed at n=${i + 1}: Expected ${expected[i]}, got $actual")
            allPass = false
        } else {
            println("√ Success at n=${i + 1}: Expected ${expected[i]}, got $actual")
        }
    }

    if (allPass) {
        println("✅ All ${expected.size} test cases passed!")
    }
}

class SequenceKValue {
    fun valueAtK(k: Int): Int {
        var sequence2Index = 0
        var sequence3Index = 0

        val result = linkedSetOf(1)

        while (result.size < k){
            if(sequence2Index <= result.size -1 && sequence3Index <= result.size -1) {
                if (2 * result.elementAt(sequence2Index) <= 3 * result.elementAt(sequence3Index)) {
                    result.add(2 * result.elementAt(sequence2Index) + 1)
                    sequence2Index++
                } else {
                    result.add(3 * result.elementAt(sequence3Index) + 1)
                    sequence3Index++
                }
            }
        }

        return result.elementAt(k - 1)
    }
}